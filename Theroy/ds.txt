Stacks or Queues
1.Stacks are based on the LIFO principle, i.e., the element inserted at the last, is the first element to come out of the list.	
  Queues are based on the FIFO principle, i.e., the element inserted at the first, is the first element to come out of the list.

2.Insertion and deletion in stacks takes place only from one end of the list called the top.	
  Insertion and deletion in queues takes place from the opposite ends of the list.


3.Insert operation is called push operation.	Insert operation is called enqueue operation.
4.Delete operation is called pop operation.	Delete operation is called dequeue operation.
5.In stacks we maintain only one pointer to access the list,called the top,
 which always points to the last element present in the list.	


7.Stack is used in solving problems works on repeted processing .Queue is used in solving problems having sequential processing.
8.Stack does not have any types.Queue is of three types – 1. Circular Queue 2. Priority queue 3. double-ended queue.
9.Can be considered as a vertical collection visual.Can be considered as a horizontal collection visual.

queue:FIFO
The Queue interface is present in java.util package and extends the Collection interface is used to hold the elements about to be processed in FIFO(First In First Out) order. It is an ordered list of objects with its use limited to inserting elements at the end of the list and deleting elements from the start of the list, (i.e.), it follows the FIFO or the First-In-First-Out principle.
poll, peek , contain

import java.util.LinkedList;
import java.util.Queue;

public class queue {
	public static void main(String args[]) {

    Queue<String> bbqLine = new LinkedList<String>();

    bbqLine.add("Harsh");
    bbqLine.add("Parth");
    bbqLine.add("Akshar");

    System.out.println(bbqLine);  //will print all stack values like Harsh, Parth, Akshar

    System.out.println(bbqLine.poll());  //will print Harsh  but removes from Queue

    System.out.println(bbqLine.peek());  //will print Harsh and it will remain its position in Queue

    System.out.println(bbqLine.size());  //will print size of the queue

    System.out.println(bbqLine.contains("Parth"));  //will return true
}
}

stack:-LIFO
The stack is a linear data structure that is used to store the collection of objects. It is based on Last-In-First-Out (LIFO). Java collection framework provides many interfaces and classes to store the collection of objects. One of them is the Stack class that provides different operations such as push, pop, search, etc.
underflow=pop
overflow =push
push and pop , display

import java.util.Stack;

public class stack {
	public static void main(String args[]) {

	  Stack<String> games = new Stack<String>();


      // Add elements to Stack
	  games.push("Dog");
	  games.push("Horse");
      games.push("Cat");
      System.out.println("Initial Stack: " + games);
   System.out.println(games.search("Dog"));
      
      System.out.println(games.contains("Dog"));   //will return true
      // Remove element stacks
      String element = games.pop();
      System.out.println("Removed Element: " + element);
      

      System.out.println(games); 
      System.out.println(games.pop()); 
      System.out.println(games.peek());

   
      boolean result = games.empty();
      System.out.println("Is the stack empty? " + result);

}
}


MAP:- 
A map contains values on the basis of key, i.e. key and value pair. 
Each key and value pair is known as an entry.
A Map contains unique keys.
A Map is useful if you have to search, update or delete elements on the basis of a key.
map is interface.it is unordered strucutured

enter a student name to get student roll number

hashmap:-key value is unique key
unorderd work
      Key  Value
      dunk  2023
      pathan  2023
     jawan     2012

  get, containskey,containsvalue,put,replace,putifAbsent,remove


hashmap:-
Java HashMap class implements the Map interface which allows us to store key and value pair, where keys should be unique.
If you try to insert the duplicate key, 
it will replace the element of the corresponding key. 
It is easy to perform operations using the key index like updation, deletion, etc. 
Java HashMap contains values based on the key.
Java HashMap contains only unique keys.
Java HashMap may have one null key and multiple null values.
Java HashMap is non synchronized.
Java HashMap maintains no order.

Public class numberss{
    
    public static void main(String[] args){

        Map<String, String> students = new HashMap<>();

        students.put("Harshit", "Vataliya");
        students.put("Aayushi", "Shah");
        students.put("Dharmik", "Dabgar");
        students.put("Vishal", "Dabgar");
        students.put("Sunny", "Patel");

        System.out.println(students.get("Vishal"));

        students.containsKey("Dharmik");
        students.containsValue("Dabgar");
        students.size();
        students.remove("Sunny");
        students.clear()

        for(Map.Entry pairEntry: students.entrySet()){
            System.out.println(pairEntry.getKey() + ":" + pairEntry.getvalue());
        }

    }
}

TREEMAP:-
Java TreeMap class is a red-black tree based implementation. It provides an efficient means of storing key-value pairs in sorted order.

The important points about Java TreeMap class are:

    Java TreeMap contains values based on the key. 
    Java TreeMap contains only unique elements.
    Java TreeMap cannot have a null key but can have multiple null values.
    Java TreeMap is non synchronized.
    Java TreeMap maintains ascending order


Public class numberss{
    
    public static void main(String[] args){

        TreeMap<Integer, String> myMap = new TreeMap<Integer, String>();

        myMap.put(10, "Dhrumil");
        myMap.put(30, "Mihir");
        myMap.put(20, "Utsav");
        myMap.put(60, "Parth");
        myMap.put(50, "jainik");

        System.out.println(myMap);

        System.out.println(myMap.get(20));

        myMap.remove(60);

        for(TreeMap.Entry pairEntry: myMap.entrySet()){
            System.out.println(pairEntry.getKey() + ":" + pairEntry.getvalue());
        }
    }
}


Java LinkedHashMap class:-
Java LinkedHashMap class is Hashtable and Linked list implementation of the Map interface, with predictable iteration order. It inherits HashMap class and implements the Map interface.

    Java LinkedHashMap contains values based on the key.
    Java LinkedHashMap contains unique elements.
    Java LinkedHashMap may have one null key and multiple null values.
    Java LinkedHashMap is non synchronized.
    Java LinkedHashMap maintains insertion order.



LinkedHashMap<Integer, String> yMap = new LinkedHashMap<Integer, String>();

      yMap.put(30, "Harshit");
      yMap.put(10, "Sarthi");
      yMap.put(20, "Partik");
      yMap.put(60, "Moin");
      yMap.put(50, "jainik");

      System.out.println(yMap);

      System.out.println(yMap.get(20));

      myMap.remove(60);

      for(Entry<Integer, String> pairEntry: myMap.entrySet()){
          System.out.println(pairEntry.getKey() + ":" + pairEntry.getValue());
      }
	
set:- 
The set interface is present in java.util package and extends the Collection interface. 
It is an unordered collection of objects in which duplicate values cannot be stored. 
It is an interface that implements the mathematical set. 
This interface contains the methods inherited from the Collection interface and adds a feature that restricts the insertion of the duplicate elements

unorderd :-
averge case :- o1 and worst case :- ofn 
part:-hashset,treeset,linkedhashset

set = remove,removeall,first,last,pollfirst,polllast,containall,size
	Set<Integer> sset = new HashSet<>();
		
		sset.add(1);
		sset.add(2);
		sset.add(3);
		sset.add(1); 
		System.out.println("Print: "+sset);
		System.out.println("Print: "+sset.size());
	

		 Iterator<Integer> iterate = sset.iterator();
	        while(iterate.hasNext()) {
	            System.out.print(iterate.next());
	            System.out.print(", ");
	        }

		
	
		Set<Integer> set2 = new HashSet<>();
        set2.add(1);
        set2.add(5);
        
        set2.retainAll(sset);
        System.out.println("Union is: " + set2);
        
        set2.addAll(sset);
        System.out.println("Union is: " + set2);
        System.out.println("Set2: " + set2);
       
        
    	System.out.println("Print remove: "+sset.remove(2));
		System.out.println("Print: "+sset);

		System.out.println("Print removeall: "+sset.removeAll(sset));
		System.out.println("Print: "+sset);

treeset:-  ceiling(), floor(), higher() ,headSet(), tailSet(),retainall(),remove(),removeAll(),lower(), first() and last() 

    Java TreeSet class contains unique elements only like HashSet.
    Java TreeSet class access and retrieval times are quiet fast.
    Java TreeSet class doesn't allow null element.
    Java TreeSet class is non synchronized.
    Java TreeSet class maintains ascending order.


TreeSet<String> al=new TreeSet<String>();  
  al.add("Ravi");  
  al.add("Vijay");  
  al.add("Ravi");  
  al.add("Ajay");  
  //Traversing elements  
  Iterator<String> itr=al.iterator();  
  while(itr.hasNext()){  
   System.out.println(itr.next());  
  }  

hashset:-
HashSet stores the elements by using a mechanism called hashing.
HashSet contains unique elements only.
HashSet allows null value.
HashSet class is non synchronized.
HashSet doesn't maintain the insertion order. Here, elements are inserted on the basis of their hashcode.
unorderd set
 HashSet<String> set=new HashSet();  
           set.add("One");    
           set.add("Two");    
           set.add("Three");   
           set.add("Four");  
           set.add("Five");  
           Iterator<String> i=set.iterator();  
           while(i.hasNext())  
           {  
           System.out.println(i.next());  
           }  


LinkedHashSet:-
Java LinkedHashSet class is a Hashtable and Linked list implementation of the Set interface. 
It inherits the HashSet class and implements the Set interface

    Java LinkedHashSet class contains unique elements only like HashSet.
    Java LinkedHashSet class provides all optional set operations and permits null elements.
    Java LinkedHashSet class is non-synchronized.
    Java LinkedHashSet class maintains insertion order.

     LinkedHashSet<String> set=new LinkedHashSet();  
               set.add("One");    
               set.add("Two");    
               set.add("Three");   
               set.add("Four");  
               set.add("Five");  
               Iterator<String> i=set.iterator();  
               while(i.hasNext())  
               {  
               System.out.println(i.next());  
               }  




array:-
   Java array is an object which contains elements of a similar data type. 
   The elements of an array are stored in a contiguous memory location.
   We can store only a fixed set of elements in a Java array.
   In Java, array is an object of a dynamically generated class.
   Java array inherits the Object class.
   it is implements the Serializable as well as Cloneable interfaces.

class Main {
 public static void main(String[] args) {
  
   int[] age = {12, 4, 5, 2, 5};

   System.out.println("Accessing Elements of Array:");
   System.out.println("First Element: " + age[0]);
   System.out.println("Second Element: " + age[1]);
   System.out.println("Third Element: " + age[2]);
   System.out.println("Fourth Element: " + age[3]);
   System.out.println("Fifth Element: " + age[4]);
 }
}


arrylist:- 

    Java ArrayList class can contain duplicate elements.
    Java ArrayList class maintains insertion order.
    Java ArrayList class is non synchronized.
    Java ArrayList allows random access because the array works on an index basis.

    In ArrayList, manipulation is a little bit slower than the LinkedList in Java because a lot of shifting needs to occur if any element is removed from the array list.
    We can not create an array list of the primitive types, such as int, float, char, etc. It is required to use the required wrapper class in such cases.

proceess:-add,get,modify,delete,size,loops

class Main {
  public static void main(String[] args){


    ArrayList<String> languages = new ArrayList<>();
    languages.add("Java");
    languages.add("Python");
    languages.add("Swift");
    System.out.println("ArrayList: " + languages);
  }
}

Following are the important differences between HashMap and HashSet.
              
1.Hashmap is the implementation of Map interface.	
  Hashset on other hand is the implementation of set interface.
2.Hashmap internally not use hashset for its implementation	
  Hashset internally uses Hashmap for its implementation.
3.HashMap Stores elements in form of key-value pair 
  HashSet stores only objects no such key value pairs maintained.
4.Put method of hash map is used to add element in hashmap.	
   On other hand add method of hashset is used to add element in hashset.
5.Hashmap due to its unique key is faster in retrieval of element during its iteration.	
  HashSet is completely based on object so compared to hashmap is slower.
6.Single null key and any number of null value can be inserted in hashmap without any restriction.	
   On other hand Hashset allows only one null value in its collection,after which no null value is allowed to be added.
7.hashmap is not Sorted formate.  hashset is sorted formate.

different hashset and treeset
                        hashset                                                      tree
1 	The Hash set is executed with the help of a HashTable. 	  The tree set is executed with the help of a tree structure.
2 	It does not authorise a heterogeneous object.          	  It authorises a heterogeneous object.
3 	It permits a null object. 	                          It does not permit the null object.
4 	To compare two objects, we use the equals method. 	  To compare two objects, we use the compare method.
5 	It does not support any order 	                          TreeSet supports an object in sorted order.
       
differnt betwwen array ans arraylist
The array is a specified-length data structure whereas       ArrayList is a variable-length Collection class
Array is static. 	                                     ArrayList is dynamic and can be modified the size whenever needed
It can either be single-dimensional or multidimensional. 	It can be only single-dimensional
Through the length keyword, we can determine the              Through the size() method, we can determine the size of an ArrayList
total size of an array.


